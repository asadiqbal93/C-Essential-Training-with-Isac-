/*
                                Recursion and Recurrence
                                ________________________
                -Recursion is a process in which a functions calls itself.
                -Based on recurrence relationships in mathematics
                -For example: An = An-1 + An-2
                    A0 = 1 , A1 = 0 (Initial conditions are required)
                    A2 = 1, A3 = 1,A4 = 2,A5 = 3, A6 = 5

                            A Recursive Function
                    void func(int num){

                        func(num+1); --The function calls itself
                        printf("num = %d \n",num);

                    } --- The function is called with initial value func(1);
                      --- This will never end because there is nothing to stop this process
                      --- Functions will duplicate themselves again and again




*/

#include <stdio.h>
#include <stdlib.h>

void numberSeriesStops(int k);
void recursiveHalfStops(int k, double val);

int main(void){

    numberSeries(1);
    // recursiveHalf(1, 1000.0);

    //numberSeriesStops(1);
    //recursiveHalfStops(1, 1000.0);

    return EXIT_SUCCESS;

}

//Recursive functions that run until all memory is exhausted
//---- WARNING DO NOT DO THIS !!!! ----
void numberSeries(int k){

    printf("k: %d\n",k);
    numberSeries(k+1);

}

//---- WARNING DO NOT DO THIS !!!! ----
void recursiveHalf(int k, double val){
    printf("Step:%d  val=%lf\n",k,val);
    recursiveHalf(k+1, val/2.0);

}

//Recursive functions with a safety stop
void numberSeriesStops(int k){
     printf("k: %d\n",k);
        if(k<20)
        numberSeriesStops(k+1);
}

void recursiveHalfStops(int k,double val){
     printf("Step:%d val=%lf\n",k,val);
       if(k<20)
       recursiveHalfStops(1,1000.0);

}
