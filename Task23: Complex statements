/*

    Complex Statements
    - Complex statements involve the use of multiple expressions
    Example of Complex Statement

    int initValue = 0;
    int weight = 5;
    int k = 1;
    int flag = (k <10 )
    int result = initValue + flag*weight*k++l

*/





#include <stdio.h>
#include <stdlib.h>


int main(void){

    puts("Assignment operators in complex statements");

    int a = 5;
    int b = -3;
    int c = 12;

    float r = 1.52;
    float s = 2.08;
    float t = -5.32;

    int integerResult;
    float floatResult;

    integerResult = a * r;
    puts("---------- PART 1----------------");
    printf("integerResult = %d\n",integerResult);

    floatResult = a * r;
    printf("floatResult = %f\n",floatResult);

    integerResult = (a > b)*c; //Note that (a>b) is true ie 1
    printf("integerResult = %d\n",integerResult);

    puts("----------- PART 2----------------");
    printf("a before: %d\n",a);
    integerResult = (++a)*b; //a is incremented first , then used in multiplication
    printf("integerResult: %d \n",integerResult);
    printf("a after: %d\n",a);

    puts("----------- PART 3-----------------");

    a = 5; //Reset to original value
    printf("a before: %d\n",a);
    integerResult = (a++)*b; //a is used in the multiplication and then incremented
    printf("integerResult: %d\n",integerResult);-
    printf("a after: %d\n",a);

    puts("----------- PART 4-----------------");
    int initialValue = 0;
    int increment = 5;
    int counter = 1;
    int result = initialValue + increment*counter++; //counter is first used
    printf("result first time: %d counter: %d\n",result ,counter);
       result = initialValue + increment*counter++;
    printf("result second time: %d counter: %d\n",result ,counter);
        result = initialValue + increment*(++counter);//counter is first incremented
    printf("result third time: %d counter: %d\n",result,counter);

    return 0;







}
